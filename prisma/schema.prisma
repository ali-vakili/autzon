// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  AGENT
}

model AutoGalleryCategory {
  id           Int           @id @default(autoincrement())
  category     String
  abbreviation String?
  galleries    AutoGallery[]
}

model PhoneNumber {
  id     String @id @default(uuid())
  number String @db.VarChar(11)

  //relations
  gallery    AutoGallery? @relation(fields: [gallery_id], references: [id], onDelete: Cascade)
  gallery_id String?
}

model Image {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  agent      AutoGalleryAgent? @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  agent_id   String?           @unique
  gallery    AutoGallery?      @relation(fields: [gallery_id], references: [id], onDelete: Cascade)
  gallery_id String?           @unique
  Car        Car?              @relation(fields: [car_id], references: [id], onDelete: Cascade)
  car_id     String?           @unique
}

model ActivationToken {
  id          String           @id @default(uuid())
  verifyToken String           @unique @db.Text
  agent_id    String
  agent       AutoGalleryAgent @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  activatedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Province {
  id        Int    @id
  name_fa   String
  name_en   String
  slug      String
  latitude  Float
  longitude Float
  cities    City[]
}

model City {
  id          Int           @id
  name_fa     String
  name_en     String
  slug        String
  latitude    Float
  longitude   Float
  province    Province      @relation(fields: [province_id], references: [id])
  province_id Int
  gallery     AutoGallery[]
}

model Model {
  id           Int       @id @default(autoincrement())
  name         String
  brand        Brand     @relation(fields: [brand_id], references: [id])
  brand_id     Int
  fuel_type    FuelType? @relation(fields: [fuel_type_id], references: [id])
  fuel_type_id Int?
  cars         Car[]
}

model Brand {
  id     Int     @id
  name   String
  models Model[]
}

model FuelType {
  id    Int     @id @default(autoincrement())
  type  String
  cars  Car[]
  Model Model[]
}

model Car {
  id                 String             @id @default(uuid())
  title              String             @db.VarChar(30)
  model              Model              @relation(fields: [model_id], references: [id])
  model_id           Int
  build_year         Int
  fuel_type          FuelType           @relation(fields: [fuel_type_id], references: [id])
  fuel_type_id       Int
  images             Image[]
  gallery            AutoGallery        @relation(fields: [gallery_id], references: [id], onDelete: Cascade)
  gallery_id         String
  for_rent           RentalCar?
  for_sale           SaleCar?
  is_car_rented      RentedCar[]
  rental_car_history RentalCarHistory[]
  description        String             @db.VarChar(400)
  is_published       Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model RentalCar {
  id                         String   @id @default(uuid())
  Car                        Car      @relation(fields: [car_id], references: [id], onDelete: Cascade)
  car_id                     String   @unique
  price_per_day              Float
  pick_up_place              String
  drop_off_place             String
  reservation_fee_percentage Float?
  late_return_fee_per_hour   Float?
  extra_time                 Boolean  @default(false)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
}

model RentedCar {
  id              String           @id @default(uuid())
  rented_user     AutoGalleryAgent @relation(fields: [rented_user_id], references: [id])
  rented_user_id  String
  Car             Car              @relation(fields: [car_id], references: [id], onDelete: Cascade)
  car_id          String           @unique
  days            Int
  pick_up_date    DateTime
  drop_off_date   DateTime
  reservation_fee Float?
  total_price     Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([car_id, rented_user_id])
}

model RentalCarHistory {
  id             String           @id @default(uuid())
  car_id         String
  Car            Car              @relation(fields: [car_id], references: [id])
  rented_user    AutoGalleryAgent @relation(fields: [rented_user_id], references: [id])
  rented_user_id String
  pick_up_date   DateTime
  drop_off_date  DateTime
  createdAt      DateTime         @default(now())
}

model SaleCar {
  id        String   @id @default(uuid())
  Car       Car      @relation(fields: [car_id], references: [id], onDelete: Cascade)
  car_id    String   @unique
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AutoGallery {
  id            String                @id @default(uuid())
  name          String                @db.VarChar(30)
  image         Image?
  cars          Car[]
  categories    AutoGalleryCategory[]
  city          City                  @relation(fields: [city_id], references: [id])
  city_id       Int
  address       String
  phone_numbers PhoneNumber[]
  about         String?               @db.VarChar(1024)
  agent         AutoGalleryAgent      @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  agent_id      String
  is_verified   Boolean               @default(false)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
}

model AutoGalleryAgent {
  id                   String               @id @default(uuid())
  firstName            String?              @db.VarChar(30)
  lastName             String?              @db.VarChar(30)
  image                Image?
  role                 Role                 @default(AGENT)
  email                String               @unique
  password             String?
  phone_number         String?              @db.VarChar(11)
  bio                  String?              @db.VarChar(1024)
  gallery              AutoGallery[]
  rented_cars          RentedCar[]
  rental_car_history   RentalCarHistory[]
  activation_token     ActivationToken[]
  password_reset_token PasswordResetToken[]
  accounts             Account[]
  sessions             Session[]
  is_profile_complete  Boolean              @default(false)
  is_subscribed        Boolean              @default(false)
  is_verified          Boolean              @default(false)
  join_date            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user AutoGalleryAgent @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String           @id @default(uuid())
  sessionToken String           @unique
  userId       String
  expires      DateTime
  user         AutoGalleryAgent @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  token     String    @unique @db.Text
  createdAt DateTime  @default(now())
  resetAt   DateTime?

  //relations
  agent    AutoGalleryAgent? @relation(fields: [agent_id], references: [id])
  agent_id String?
}
