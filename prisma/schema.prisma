// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  AGENT
}

model AutoGalleryCategory {
  id           Int           @id @default(autoincrement())
  category     String
  abbreviation String?
  galleries    AutoGallery[]
}

model Image {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  agent      AutoGalleryAgent? @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  agent_id   String?           @unique
  gallery    AutoGallery?      @relation(fields: [gallery_id], references: [id], onDelete: Cascade)
  gallery_id String?           @unique
  Car        Car?              @relation(fields: [car_id], references: [id], onDelete: Cascade)
  car_id     String?           @unique
}

model ActivationToken {
  id          String           @default(uuid())
  verifyToken String           @unique @db.Text
  agent_id    String
  agent       AutoGalleryAgent @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  activatedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Province {
  id        Int    @id
  name_fa   String
  name_en   String
  slug      String
  latitude  Float
  longitude Float
  cities    City[]
}

model City {
  id          Int           @id
  name_fa     String
  name_en     String
  slug        String
  latitude    Float
  longitude   Float
  province    Province      @relation(fields: [province_id], references: [id])
  province_id Int
  gallery     AutoGallery[]
}

model Car {
  id           String      @id @default(uuid())
  title        String      @db.VarChar(30)
  brand        String      @db.VarChar(10)
  model        String      @db.VarChar(15)
  buid_year    Int
  images       Image[]
  gallery      AutoGallery @relation(fields: [gallery_id], references: [id], onDelete: Cascade)
  gallery_id   String
  for_rent     RentCar?
  for_sale     SaleCar?
  description  String      @db.VarChar(400)
  is_published Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model RentCar {
  id             String @id @default(uuid())
  price_per_day  Float?
  price_per_hour Float?
  Car            Car    @relation(fields: [car_id], references: [id])
  car_id         String @unique
}

model SaleCar {
  id     String @id @default(uuid())
  price  Float
  Car    Car    @relation(fields: [car_id], references: [id])
  car_id String @unique
}

model AutoGallery {
  id           String                @id @default(uuid())
  name         String                @db.VarChar(30)
  image_id     Image?
  cars         Car[]
  categories   AutoGalleryCategory[]
  city         City                  @relation(fields: [city_id], references: [id])
  city_id      Int
  address      String
  phone_number String                @db.VarChar(11)
  agent        AutoGalleryAgent      @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  agent_id     String
  is_verified  Boolean               @default(false)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model AutoGalleryAgent {
  id               String            @id @default(uuid())
  firstName        String?           @db.VarChar(30)
  lastName         String?           @db.VarChar(30)
  image_id         Image?
  role             Role              @default(AGENT)
  email            String            @unique
  password         String
  phone_number     String?           @db.VarChar(11)
  gallery          AutoGallery[]
  activation_token ActivationToken[]
  is_subscribed    Boolean           @default(false)
  is_verified      Boolean           @default(false)
  join_date        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}
